{"ast":null,"code":"const initialState = {\n  error: null,\n  token: localStorage.getItem(\"token\"),\n  role: localStorage.getItem(\"role\")\n};\n\nconst application = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"application/signup/painding\":\n      return { ...state,\n        signing: true,\n        error: null\n      };\n\n    case \"application/signup/fulfilled\":\n      return { ...state,\n        signing: false,\n        message: \"вы успешно зарегистрированы\",\n        role: action.payload\n      };\n\n    case \"application/signup/rejected\":\n      return { ...state,\n        signing: false,\n        error: action.error\n      };\n\n    case \"application/signin/painding\":\n      return { ...state,\n        signing: true,\n        error: null\n      };\n\n    case \"application/signin/fulfilled\":\n      return { ...state,\n        signing: false,\n        token: action.payload.token,\n        role: action.payload.role,\n        message: `Вы вошли как ${action.payload.login}`\n      };\n\n    case \"application/signin/rejected\":\n      return { ...state,\n        signing: false,\n        error: action.error\n      };\n\n    case \"application/signout/painding\":\n      return { ...state,\n        signing: true,\n        error: null\n      };\n\n    case \"application/signout/fulfilled\":\n      return { ...state,\n        signing: false,\n        token: action.payload.token,\n        role: action.payload.role,\n        message: `Вы вошли как ${action.payload.login}`\n      };\n\n    case \"application/signout/rejected\":\n      return { ...state,\n        signing: false,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const signUpFetch = (login, password) => {\n  return async dispatch => {\n    dispatch({\n      type: \"application/signup/painding\"\n    });\n\n    try {\n      await fetch(\"http://localhost:4000/createUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          login,\n          password\n        })\n      });\n      dispatch({\n        type: \"application/signup/fulfilled\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"application/signup/rejected\",\n        error: error.toString()\n      });\n    }\n  };\n};\nexport const signInFetch = (login, password) => {\n  return async dispatch => {\n    dispatch({\n      type: \"application/signin/painding\"\n    });\n\n    try {\n      const res = await fetch(\"http://localhost:4000/loginUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          login,\n          password\n        })\n      });\n      const token = await res.json();\n      let role;\n\n      if (login === \"admin\") {\n        role = login;\n      } else {\n        role = \"user\";\n      }\n\n      dispatch({\n        type: \"application/signin/fulfilled\",\n        payload: {\n          login,\n          token: token.token,\n          role\n        }\n      });\n      localStorage.setItem(\"token\", token.token);\n      localStorage.setItem(\"role\", role);\n    } catch (error) {\n      dispatch({\n        type: \"application/signin/rejected\",\n        error: error.toString()\n      });\n    }\n  };\n};\nexport const signOut = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"application/signout/painding\"\n    });\n\n    try {\n      dispatch({\n        type: \"application/signout/fulfilled\"\n      });\n      localStorage.removeItem(\"role\");\n      localStorage.removeItem(\"token\");\n    } catch (error) {\n      dispatch({\n        type: \"application/signout/rejected\"\n      });\n    }\n  };\n};\nexport default application;","map":{"version":3,"sources":["/Users/islam/intocode/newProductSait/frontForProductSait/my-app/src/redux/features/application.js"],"names":["initialState","error","token","localStorage","getItem","role","application","state","action","type","signing","message","payload","login","signUpFetch","password","dispatch","fetch","method","headers","body","JSON","stringify","toString","signInFetch","res","json","setItem","signOut","removeItem"],"mappings":"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","sourcesContent":["const initialState = {\n  error: null,\n  token: localStorage.getItem(\"token\"),\n  role: localStorage.getItem(\"role\"),\n};\n\nconst application = (state = initialState, action) => {\n  switch (action.type) {\n    case \"application/signup/painding\":\n      return {\n        ...state,\n        signing: true,\n        error: null,\n      };\n\n    case \"application/signup/fulfilled\":\n      return {\n        ...state,\n        signing: false,\n        message: \"вы успешно зарегистрированы\",\n        role: action.payload,\n      };\n    case \"application/signup/rejected\":\n      return {\n        ...state,\n        signing: false,\n        error: action.error,\n      };\n    case \"application/signin/painding\":\n      return {\n        ...state,\n        signing: true,\n        error: null,\n      };\n    case \"application/signin/fulfilled\":\n      return {\n        ...state,\n        signing: false,\n        token: action.payload.token,\n        role: action.payload.role,\n        message: `Вы вошли как ${action.payload.login}`,\n      };\n    case \"application/signin/rejected\":\n      return {\n        ...state,\n        signing: false,\n        error: action.error,\n      };\n    case \"application/signout/painding\":\n      return {\n        ...state,\n        signing: true,\n        error: null,\n      };\n    case \"application/signout/fulfilled\":\n      return {\n        ...state,\n        signing: false,\n        token: action.payload.token,\n        role: action.payload.role,\n        message: `Вы вошли как ${action.payload.login}`,\n      };\n    case \"application/signout/rejected\":\n      return {\n        ...state,\n        signing: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const signUpFetch = (login, password) => {\n  return async (dispatch) => {\n    dispatch({ type: \"application/signup/painding\" });\n    try {\n      await fetch(\"http://localhost:4000/createUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify({ login, password }),\n      });\n      dispatch({\n        type: \"application/signup/fulfilled\",\n      });\n    } catch (error) {\n      dispatch({\n        type: \"application/signup/rejected\",\n        error: error.toString(),\n      });\n    }\n  };\n};\n\nexport const signInFetch = (login, password) => {\n  return async (dispatch) => {\n    dispatch({ type: \"application/signin/painding\" });\n    try {\n      const res = await fetch(\"http://localhost:4000/loginUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify({ login, password }),\n      });\n      const token = await res.json();\n      let role;\n      if (login === \"admin\") {\n        role = login;\n      } else {\n        role = \"user\";\n      }\n      dispatch({\n        type: \"application/signin/fulfilled\",\n        payload: {\n          login,\n          token: token.token,\n          role,\n        },\n      });\n\n      localStorage.setItem(\"token\", token.token);\n      localStorage.setItem(\"role\", role);\n    } catch (error) {\n      dispatch({\n        type: \"application/signin/rejected\",\n        error: error.toString(),\n      });\n    }\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    dispatch({ type: \"application/signout/painding\" });\n    try {\n      dispatch({ type: \"application/signout/fulfilled\" });\n      localStorage.removeItem(\"role\");\n      localStorage.removeItem(\"token\");\n    } catch (error) {\n      dispatch({ type: \"application/signout/rejected\" });\n    }\n  };\n};\nexport default application;\n"]},"metadata":{},"sourceType":"module"}