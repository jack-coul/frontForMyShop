{"ast":null,"code":"const initialState = {\n  cash: 0,\n  cashing: false,\n  error: null\n};\n\nconst user = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"cash/user/pending\":\n      return { ...state,\n        cashing: true,\n        error: null\n      };\n\n    case \"cash/user/fulfilled\":\n      return { ...state,\n        cash: action.payload.user.cash,\n        cashing: false,\n        message: `Кошелек успешно пополнен на ${action.payload.sumCash}`\n      };\n\n    case \"cash/user/rejected\":\n      return { ...state,\n        cashing: false,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addCashIn = (login, sumCash) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    dispatch({\n      type: \"cash/user/pending\"\n    });\n\n    try {\n      const res = await fetch(`http://localhost:4000/cashIn`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${state.application.token}`\n        }\n      });\n      const user = await res.json();\n      dispatch({\n        type: \"cash/user/fulfilled\",\n        payload: {\n          user,\n          sumCash\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: \"cash/user/rejected\",\n        error: error\n      });\n    }\n  };\n};\nexport default user;","map":{"version":3,"sources":["/Users/islam/intocode/newProductSait/frontForProductSait/my-app/src/redux/features/user.js"],"names":["initialState","cash","cashing","error","user","state","action","type","payload","message","sumCash","addCashIn","login","dispatch","getState","res","fetch","method","headers","Authorization","application","token","json"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMC,IAAI,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELH,QAAAA,OAAO,EAAE,IAFJ;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELJ,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAAP,CAAeJ,IAAf,CAAoBH,IAFrB;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILO,QAAAA,OAAO,EAAG,+BAA8BH,MAAM,CAACE,OAAP,CAAeE,OAAQ;AAJ1D,OAAP;;AAMF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAHT,OAAP;;AAKF;AACE,aAAOE,KAAP;AArBJ;AAuBD,CAxBD;;AA0BA,OAAO,MAAMM,SAAS,GAAG,CAACC,KAAD,EAAQF,OAAR,KAAoB;AAC3C,SAAO,OAAOG,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMT,KAAK,GAAGS,QAAQ,EAAtB;AACAD,IAAAA,QAAQ,CAAC;AAAEN,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMQ,GAAG,GAAG,MAAMC,KAAK,CAAE,8BAAF,EAAiC;AACtDC,QAAAA,MAAM,EAAE,OAD8C;AAEtDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAG,UAASd,KAAK,CAACe,WAAN,CAAkBC,KAAM;AAF1C;AAF6C,OAAjC,CAAvB;AAOA,YAAMjB,IAAI,GAAG,MAAMW,GAAG,CAACO,IAAJ,EAAnB;AACAT,MAAAA,QAAQ,CAAC;AACPN,QAAAA,IAAI,EAAE,qBADC;AAEPC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,IADO;AAEPM,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAhBD,CAgBE,OAAOP,KAAP,EAAc;AACdU,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,oBAAR;AAA8BJ,QAAAA,KAAK,EAAEA;AAArC,OAAD,CAAR;AACD;AACF,GAtBD;AAuBD,CAxBM;AA0BP,eAAeC,IAAf","sourcesContent":["const initialState = {\n  cash: 0,\n  cashing: false,\n  error: null,\n};\n\nconst user = (state = initialState, action) => {\n  switch (action.type) {\n    case \"cash/user/pending\":\n      return {\n        ...state,\n        cashing: true,\n        error: null,\n      };\n    case \"cash/user/fulfilled\":\n      return {\n        ...state,\n        cash: action.payload.user.cash,\n        cashing: false,\n        message: `Кошелек успешно пополнен на ${action.payload.sumCash}`,\n      };\n    case \"cash/user/rejected\":\n      return {\n        ...state,\n        cashing: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const addCashIn = (login, sumCash) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    dispatch({ type: \"cash/user/pending\" });\n    try {\n      const res = await fetch(`http://localhost:4000/cashIn`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${state.application.token}`,\n        },\n      });\n      const user = await res.json();\n      dispatch({\n        type: \"cash/user/fulfilled\",\n        payload: {\n          user,\n          sumCash,\n        },\n      });\n    } catch (error) {\n      dispatch({ type: \"cash/user/rejected\", error: error });\n    }\n  };\n};\n\nexport default user;\n"]},"metadata":{},"sourceType":"module"}