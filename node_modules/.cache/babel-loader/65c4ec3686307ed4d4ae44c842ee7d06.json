{"ast":null,"code":"const initialState = {\n  error: null,\n  token: localStorage.getItem(\"token\")\n};\n\nconst application = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"application/signup/painding\":\n      return { ...state,\n        signing: true,\n        error: null\n      };\n\n    case \"application/signup/fulfilled\":\n      return { ...state,\n        signing: false,\n        message: \"вы успешно зарегистрированы\",\n        role: action.payload\n      };\n\n    case \"application/signup/rejected\":\n      return { ...state,\n        signing: false,\n        error: action.error\n      };\n\n    case \"application/signin/painding\":\n      return { ...state,\n        signing: true,\n        error: null\n      };\n\n    case \"application/signin/fulfilled\":\n      return { ...state,\n        signing: false,\n        token: action.payload.token,\n        role,\n        message: `Вы вошли как ${action.payload.login}`\n      };\n\n    case \"application/signin/rejected\":\n      return { ...state,\n        signing: false,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const signUpFetch = (login, password) => {\n  return async dispatch => {\n    dispatch({\n      type: \"application/signup/painding\"\n    });\n\n    try {\n      const res = await fetch(\"http://localhost:4000/createUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          login,\n          password\n        })\n      });\n      const userRole = await res.json();\n      dispatch({\n        type: \"application/signup/fulfilled\",\n        payload: userRole.role\n      });\n    } catch (error) {\n      dispatch({\n        type: \"application/signup/rejected\",\n        error: error.toString()\n      });\n    }\n  };\n};\nexport const signInFetch = (login, password) => {\n  return async dispatch => {\n    dispatch({\n      type: \"application/signin/painding\"\n    });\n\n    try {\n      const res = await fetch(\"http://localhost:4000/loginUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          login,\n          password\n        })\n      });\n      const token = await res.json();\n      let role;\n\n      if (login === \"admin\") {\n        role = login;\n      } else {\n        role = \"user\";\n      }\n\n      dispatch({\n        type: \"application/signin/fulfilled\",\n        payload: {\n          login,\n          token: token.token,\n          role\n        }\n      });\n      localStorage.setItem(\"token\", token.token);\n    } catch (error) {\n      dispatch({\n        type: \"application/signin/rejected\",\n        error: error.toString()\n      });\n    }\n  };\n};\nexport default application;","map":{"version":3,"sources":["/Users/islam/intocode/newProductSait/frontForProductSait/my-app/src/redux/features/application.js"],"names":["initialState","error","token","localStorage","getItem","application","state","action","type","signing","message","role","payload","login","signUpFetch","password","dispatch","res","fetch","method","headers","body","JSON","stringify","userRole","json","toString","signInFetch","setItem"],"mappings":"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","sourcesContent":["const initialState = {\n  error: null,\n  token: localStorage.getItem(\"token\"),\n};\n\nconst application = (state = initialState, action) => {\n  switch (action.type) {\n    case \"application/signup/painding\":\n      return {\n        ...state,\n        signing: true,\n        error: null,\n      };\n\n    case \"application/signup/fulfilled\":\n      return {\n        ...state,\n        signing: false,\n        message: \"вы успешно зарегистрированы\",\n        role: action.payload,\n      };\n    case \"application/signup/rejected\":\n      return {\n        ...state,\n        signing: false,\n        error: action.error,\n      };\n    case \"application/signin/painding\":\n      return {\n        ...state,\n        signing: true,\n        error: null,\n      };\n    case \"application/signin/fulfilled\":\n      return {\n        ...state,\n        signing: false,\n        token: action.payload.token,\n        role,\n        message: `Вы вошли как ${action.payload.login}`,\n      };\n    case \"application/signin/rejected\":\n      return {\n        ...state,\n        signing: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const signUpFetch = (login, password) => {\n  return async (dispatch) => {\n    dispatch({ type: \"application/signup/painding\" });\n    try {\n      const res = await fetch(\"http://localhost:4000/createUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify({ login, password }),\n      });\n      const userRole = await res.json();\n      dispatch({\n        type: \"application/signup/fulfilled\",\n        payload: userRole.role,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"application/signup/rejected\",\n        error: error.toString(),\n      });\n    }\n  };\n};\n\nexport const signInFetch = (login, password) => {\n  return async (dispatch) => {\n    dispatch({ type: \"application/signin/painding\" });\n    try {\n      const res = await fetch(\"http://localhost:4000/loginUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify({ login, password }),\n      });\n      const token = await res.json();\n      let role;\n      if (login === \"admin\") {\n        role = login;\n      } else {\n        role = \"user\";\n      }\n      dispatch({\n        type: \"application/signin/fulfilled\",\n        payload: {\n          login,\n          token: token.token,\n          role,\n        },\n      });\n\n      localStorage.setItem(\"token\", token.token);\n    } catch (error) {\n      dispatch({\n        type: \"application/signin/rejected\",\n        error: error.toString(),\n      });\n    }\n  };\n};\nexport default application;\n"]},"metadata":{},"sourceType":"module"}