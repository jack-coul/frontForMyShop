{"ast":null,"code":"export const getUser = login => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    dispatch({\n      type: \"get/user/pending\"\n    });\n    console.log(login, state.application.token);\n\n    try {\n      const res = await fetch(`http://localhost:4000/oneUser`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${state.application.token}`\n        },\n        body: JSON.stringify({\n          login\n        })\n      });\n      const user = await res.json();\n      console.log(user);\n      dispatch({\n        type: \"get\"\n      });\n    } catch (error) {\n      console.log(73);\n      dispatch({\n        type: \"get/user/rejected\",\n        error: error.toString()\n      });\n    }\n  };\n};\nexport const addCashIn = (login, sumCash) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    dispatch({\n      type: \"cash/user/pending\"\n    });\n\n    try {\n      const res = await fetch(`http://localhost:4000/cashIn`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${state.application.token}`\n        },\n        body: JSON.stringify({\n          login,\n          cash: sumCash\n        })\n      });\n      const resultCash = await res.json();\n      console.log(resultCash);\n      dispatch({\n        type: \"cash/user/fulfilled\",\n        payload: {\n          resultCash,\n          sumCash\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: \"cash/user/rejected\",\n        error: error\n      });\n    }\n  };\n};\nexport default user;","map":{"version":3,"sources":["/Users/islam/intocode/newProductSait/frontForProductSait/my-app/src/redux/features/user.js"],"names":["getUser","login","dispatch","getState","state","type","console","log","application","token","res","fetch","method","headers","Authorization","body","JSON","stringify","user","json","error","toString","addCashIn","sumCash","cash","resultCash","payload"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAIC,KAAD,IAAW;AAChC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmBG,KAAK,CAACI,WAAN,CAAkBC,KAArC;;AACA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAAF,EAAkC;AACvDC,QAAAA,MAAM,EAAE,MAD+C;AAEvDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAG,UAASV,KAAK,CAACI,WAAN,CAAkBC,KAAM;AAF1C,SAF8C;AAMvDM,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEhB,UAAAA;AAAF,SAAf;AANiD,OAAlC,CAAvB;AAQA,YAAMiB,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYW,IAAZ;AACAhB,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAZD,CAYE,OAAOe,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAL,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,mBAAR;AAA6Be,QAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN;AAApC,OAAD,CAAR;AACD;AACF,GApBD;AAqBD,CAtBM;AAwBP,OAAO,MAAMC,SAAS,GAAG,CAACrB,KAAD,EAAQsB,OAAR,KAAoB;AAC3C,SAAO,OAAOrB,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACAD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMK,GAAG,GAAG,MAAMC,KAAK,CAAE,8BAAF,EAAiC;AACtDC,QAAAA,MAAM,EAAE,OAD8C;AAEtDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAG,UAASV,KAAK,CAACI,WAAN,CAAkBC,KAAM;AAF1C,SAF6C;AAMtDM,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEhB,UAAAA,KAAF;AAASuB,UAAAA,IAAI,EAAED;AAAf,SAAf;AANgD,OAAjC,CAAvB;AAQA,YAAME,UAAU,GAAG,MAAMf,GAAG,CAACS,IAAJ,EAAzB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYkB,UAAZ;AACAvB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAE,qBADC;AAEPqB,QAAAA,OAAO,EAAE;AACPD,UAAAA,UADO;AAEPF,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAlBD,CAkBE,OAAOH,KAAP,EAAc;AACdlB,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,oBAAR;AAA8Be,QAAAA,KAAK,EAAEA;AAArC,OAAD,CAAR;AACD;AACF,GAxBD;AAyBD,CA1BM;AA4BP,eAAeF,IAAf","sourcesContent":["export const getUser = (login) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    dispatch({ type: \"get/user/pending\" });\n    console.log(login, state.application.token);\n    try {\n      const res = await fetch(`http://localhost:4000/oneUser`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${state.application.token}`,\n        },\n        body: JSON.stringify({ login }),\n      });\n      const user = await res.json();\n      console.log(user);\n      dispatch({ type: \"get\" });\n    } catch (error) {\n      console.log(73);\n      dispatch({ type: \"get/user/rejected\", error: error.toString() });\n    }\n  };\n};\n\nexport const addCashIn = (login, sumCash) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    dispatch({ type: \"cash/user/pending\" });\n    try {\n      const res = await fetch(`http://localhost:4000/cashIn`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${state.application.token}`,\n        },\n        body: JSON.stringify({ login, cash: sumCash }),\n      });\n      const resultCash = await res.json();\n      console.log(resultCash);\n      dispatch({\n        type: \"cash/user/fulfilled\",\n        payload: {\n          resultCash,\n          sumCash,\n        },\n      });\n    } catch (error) {\n      dispatch({ type: \"cash/user/rejected\", error: error });\n    }\n  };\n};\n\nexport default user;\n"]},"metadata":{},"sourceType":"module"}